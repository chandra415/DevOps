# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

# pool:
#   vmImage: windows-latest

schedules:
  - cron: "*/2 * * * *"
    displayName: QA_5
    branches:
      include:
        - master

# schedules:
#   - cron: "*/2 * * * *"
#     displayName: QA_5
#     branches:
#       include:
#         - master

#   - cron: "*/5 * * * *"
#     displayName: QA_7
#     branches:
#       include:
#         - master

#   - cron: "*/7 * * * *"
#     displayName: QA_9
#     branches:
#       include:
#         - master
# variables:
# #   endpointUrl: "https://dev.azure.com/{organization}/{project}/_apis/build/builds/84?api-version=6.1-preview.7"
# #   organization: "sunrise7"
# #   project: "FirstPractise"
#   buildId: $(Build.BuildId)
# variables:
#   endpointUrl: "https://dev.azure.com/{organization}/{project}/_apis/build/builds/{buildId}?api-version=6.1-preview.7"
#   organization: "sunrise7"
#   project: "FirstPractise"
#   buildId: "$(Build.BuildId)"

steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
# #   displayName: 'Run a multi-line script'
# - task: InvokeRESTAPI@1
#   inputs:
#     connectionType: 'connectedServiceName'
#     serviceConnection: 'DevOps'
#     method: 'POST'
#     waitForCompletion: 'false'

# - task: InvokeRESTAPI@1

- task: PowerShell@1
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      #Azure Devops params
      $AzureDevops_org = "sunrise7"
      $AzureDevops_project = "FirstPractise"
      # $buildId : "$(Build.BuildId)"
      
      #API Calls
      $url_base = "https://dev.azure.com/"
      $url_endpoint = "$AzureDevops_org/$AzureDevops_project/_apis/build/builds/$(Build.BuildId)?api-version=6.1-preview.7"
      #$url_endpoint = "https://dev.azure.com/GK2021/AzureDevops/_apis/build/builds?api-version=6.1-preview.6"
      
      
      $url = $url_base + $url_endpoint
      $Personal_Access_Token = "qvxe4oteuehnazplukd2okvuvvaeginb3v2bq6hnkcmmefdgbfja"
      $user = "sunrise@q5ct.onmicrosoft.com"
      
      $token = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $Personal_Access_Token)))
      $header = @{authorization = "Basic $token"}
      
      $response = Invoke-RestMethod -uri $url -Method Get -ContentType "application/json" -headers $header
      
      $scheduleName = $response.triggerInfo.scheduleName

      Write-Host "The trigger schedule name is: $scheduleName"


# - task: PowerShell@1
#   inputs:
#     scriptType: 'inlineScript'
#     inlineScript: |
#       $url = "${{variables.endpointUrl}}"
#       $organization = "${{variables.organization}}"
#       $project = "${{variables.project}}"
#       $buildId = "${{variables.buildId}}"

#       $Personal_Access_Token = "qvxe4oteuehnazplukd2okvuvvaeginb3v2bq6hnkcmmefdgbfja"
#       $user = "sunrise@q5ct.onmicrosoft.com"

#       $token = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $Personal_Access_Token)))
#       $header = @{authorization = "Basic $token"}
      
#       $response = Invoke-RestMethod -uri $url -Method Get -ContentType "application/json" -headers $header

#       #$response = Invoke-RestMethod -Uri $url -Method Get -ContentType "application/json" -Headers @{Authorization=("Bearer {0}" -f $env:SYSTEM_ACCESSTOKEN)}

#       $scheduleName = $response.triggerInfo.scheduleName

#       Write-Host "The trigger schedule name is: $scheduleName"